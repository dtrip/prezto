# vim:ft=zsh ts=2 sw=2 sts=2
#
# agnoster's Theme - https://gist.github.com/3712874
# A Powerline-inspired theme for ZSH
#
# # README
#
# In order for this theme to render correctly, you will need a
# [Powerline-patched font](https://gist.github.com/1595572).
#
# In addition, I recommend the
# [Solarized theme](https://github.com/altercation/solarized/) and, if you're
# using it on Mac OS X, [iTerm 2](http://www.iterm2.com/) over Terminal.app -
# it has significantly better color fidelity.
#
# # Goals
#
# The aim of this theme is to only show you *relevant* information. Like most
# prompts, it will only show git information when in a git working directory.
# However, it goes a step further: everything from the current user and
# hostname to whether the last call exited with an error to whether background
# jobs are running in this shell will all be displayed automatically when
# appropriate.

### Segment drawing
# A few utility functions to make it easy and re-usable to draw segmented prompts

# Load dependencies.
# pmodload 'helper'

CURRENT_BG='NONE'
PRIMARY_FG=black

# Characters
SEGMENT_SEPARATOR="\ue0b0"
SEGMENT_RSEPARATOR="\ue0b2"
PLUSMINUS="\ue601"
BRANCH="\ue0a0"
DETACHED="\u27a6"
CROSS="\uf00D"
LIGHTNING="\u26a1"
GEAR="\u2699"

# Begin a segment
# Takes two arguments, background and foreground. Both can be omitted,
# rendering default background/foreground.
prompt_segment() {
  local bg fg
  [[ -n $1 ]] && bg="%K{$1}" || bg="%k"
  [[ -n $2 ]] && fg="%F{$2}" || fg="%f"
  if [[ $CURRENT_BG != 'NONE' && $1 != $CURRENT_BG ]]; then
    print -n "%{$bg%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR%{$fg%}"
  else
    print -n "%{$bg%}%{$fg%}"
  fi
  CURRENT_BG=$1
  [[ -n $3 ]] && print -n $3
}

prompt_right_segment() {
  local bg fg
  [[ -n $1 ]] && bg="%K{$1}" || bg="%k"
  [[ -n $2 ]] && fg="%F{$2}" || fg="%f"



    # print -n "%{$fg$SEGMCENT_RSEPARATOR%}%F{$CURRENT_BG}%}%{$fg%}"
  print -n "%F{$1}$SEGMENT_RSEPARATOR%{$bg%}%{$fg%}"

  CURRENT_BG=$1
  [[ -n $3 ]] && print -n $3
  # if [[ $CURRENT_BG != 'NONE' && $1 != $CURRENT_BG ]]; then
    # print -n "%{$bg$SEGMENT_RSEPARATOR%F{$CURRENT_BG}%}%{$fg%}"
    # print -n "%{$fg$SEGMENT_RSEPARATOR%{$bg%}"
  # else
    # print -n "%{$bg%}%{$fg%}"
  # fi

}
#
# prompt_end_right() {
#   print -n "%{%k%}"
#   print -n "%{%f%}"
# }

# End the prompt, closing any open segments
prompt_end() {
  if [[ -n $CURRENT_BG ]]; then
    print -n "%{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR"
  else
    print -n "%{%k%}"
  fi
  print -n "%{%f%}"

  CURRENT_BG=''
}

### Prompt components
# Each component will draw itself, and hide itself if no information needs to be shown

# Context: user@hostname (who am I and where am I)
prompt_context() {
  local user=`whoami`
  local bg=190
  local fg=16

  if [[ $UID -eq 0 ]]; then
    bg=1
    fg=231
  fi
  if [[ "$user" != "$DEFAULT_USER" || -n "$SSH_CONNECTION" ]]; then
    # prompt_segment $bg $fg " $user "
    prompt_segment $PRIMARY_FG default " %(!.%{%F{yellow}%}.)$user "
  fi
}

# prompt_endcap() {
#   # print -n "%{%k%} "
#   # CURRENT_BG=''
#   if [[ $RETVAL -ne 0 ]]; then
#     prompt_segment 1 42 ""
#   else
#     prompt_segment 190 190 ""
#   fi
# }

# prompt_hostname() {
#   local bg=23
#   prompt_segment $bg 11 " %m "
#   CURRENT_BG=$bg
# }

# Git: branch/detached head, dirty status
# prompt_git() {
#   local color ref
#   fg=$PRIMARY_FG
#   is_dirty() {
#     test -n "$(git status --porcelain --ignore-submodules)"
#   }
#   ref="$vcs_info_msg_0_"
#   if [[ -n "$ref" ]]; then
#     if is_dirty; then
#       color=234
#       fg=87
#       ref=" ${ref} $PLUSMINUS"
#     else
#       color=234
#       fg=48
#       ref=" ${ref} "
#     fi
#     if [[ "${ref/.../}" == "$ref" ]]; then
#       ref="$BRANCH $ref"
#     # else
#       ref="$DETACHED ${ref/.../}"
#     fi
#     prompt_right_segment $color $fg ""
#     print -Pn " $ref "
#   fi
# }
# Git: branch/detached head, dirty status
prompt_git() {
  local color ref
  is_dirty() {
    test -n "$(git status --porcelain --ignore-submodules)"
  }
  ref="$vcs_info_msg_0_"
  if [[ -n "$ref" ]]; then
    if is_dirty; then
      color=yellow
      ref="${ref} $PLUSMINUS"
    else
      color=green
      ref="${ref} "
    fi
    if [[ "${ref/.../}" == "$ref" ]]; then
      ref="$BRANCH $ref"
    else
      ref="$DETACHED ${ref/.../}"
    fi
    prompt_segment $color $PRIMARY_FG
    print -Pn " $ref"
  fi
}
# Dir: current working directory
prompt_dir() {
  local fdir=${(%):-%3c}
  prompt_segment 235 228 " $fdir "
}

# Status:
# - was there an error
# - am I root
# - are there background jobs?
prompt_status() {
  local symbols
  symbols=()
  # echo $RETVAL
  # echo $status
  [[ $RETVAL -ne 0 ]] && symbols+="%{%F{red}%}$CROSS"
  [[ $UID -eq 0 ]] && symbols+="%{%F{yellow}%}$LIGHTNING"
  [[ $(jobs -l | wc -l) -gt 0 ]] && symbols+="%{%F{cyan}%}$GEAR"

  [[ -n "$symbols" ]] && prompt_segment $PRIMARY_FG default " $symbols "
}

prompt_virtualenv () {
  local bg=237
  local pye=$(pyenv version-name)
  # print -n "${python_info[virtualenv]}"
  if [[ $pye != 'system' ]] && prompt_right_segment 237 81 " $pye "
  CURRENT_BG=$bg
}
## Main prompt
prompt_dtrip_main() {
  RETVAL=$?
  CURRENT_BG='NONE'
  prompt_status
  prompt_context
  # prompt_hostname
  prompt_dir
  # prompt_endcap
  prompt_end
}

# prompt_right () {
  # print -n "%b%B{238}"
  # prompt_end
  # prompt_right_segment 228 16 " %D{%m/%d/%y %H:%M:%S} "
  # prompt_git
  # prompt_virtualenv
  # prompt_end_right

# }

prompt_dtrip_precmd() {
  # unsetopt XTRACE KSH_ARRAYS
  vcs_info

  # zstyle ':vcs_info:*:prompt:*' formats "${branch_format}"

  # vcs_info 'prompt'

  # if (( $+functions[python-info] )); then
  #   python-info
  # fi
  # # Get Git repository information.
  # if (( $+functions[git-info] )); then
  #   git-info
  # fi
  PROMPT="%{%f%b%k%}$(prompt_dtrip_main) "
  # RPROMPT="$(prompt_right)"
}

prompt_dtrip_setup() {
  autoload -Uz add-zsh-hook
  autoload -Uz vcs_info

  # unsetopt XTRACE KSH_ARRAYS

  prompt_opts=(cr subst percent)

  add-zsh-hook precmd prompt_dtrip_precmd



  # Set python-info parameters.
  # zstyle ':prezto:module:python:info:virtualenv' format '(%v)'

  # Set python-info parameters.
  # zstyle ':prezto:module:python:info:virtualenv' format '%F{yellow}[%v]%f '
  #

  # Set editor-info parameters.
  # zstyle ':prezto:module:editor:info:completing' format '%B%F{red}...%f%b'
  # zstyle ':prezto:module:editor:info:keymap:primary' format '%B%F{blue}❯%f%b'
  # zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format '%F{red}♺%f'
  # zstyle ':prezto:module:editor:info:keymap:alternate' format '%B%F{red}❮%f%b'
  #
  #


  zstyle ':vcs_info:*' enable git
  zstyle ':vcs_info:*' check-for-changes false
  zstyle ':vcs_info:git*' formats '%b'
  zstyle ':vcs_info:git*' actionformats '%b (%a)'
  #
  # zstyle ':prezto:module:git:info:action' format ' ⁝ %s'
  # zstyle ':prezto:module:git:info:added' format ' ✚'
  # zstyle ':prezto:module:git:info:ahead' format ' ⬆'
  # zstyle ':prezto:module:git:info:behind' format ' ⬇'
  # zstyle ':prezto:module:git:info:branch' format ' %b'
  # zstyle ':prezto:module:git:info:commit' format '➦ %.7c'
  # zstyle ':prezto:module:git:info:deleted' format ' ✖'
  # zstyle ':prezto:module:git:info:dirty' format ' ⁝'
  # zstyle ':prezto:module:git:info:modified' format ' ✱'
  # zstyle ':prezto:module:git:info:position' format '%p'
  # zstyle ':prezto:module:git:info:renamed' format ' ➙'
  # zstyle ':prezto:module:git:info:stashed' format ' S'
  # zstyle ':prezto:module:git:info:unmerged' format ' ═'
  # zstyle ':prezto:module:git:info:untr3acked' format ' ?'
  # zstyle ':prezto:module:git:info:keys' format \
  #   'ref' '$(coalesce "%b" "%p" "%c")' 

}

prompt_dtrip_setup "$@"
