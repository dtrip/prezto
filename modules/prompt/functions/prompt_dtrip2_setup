# vim:ft=zsh ts=2 sw=2 sts=2
#
# agnoster's Theme - https://gist.github.com/3712874
# A Powerline-inspired theme for ZSH
#
# # README
#
# In order for this theme to render correctly, you will need a
# [Powerline-patched font](https://gist.github.com/1595572).
#
# In addition, I recommend the
# [Solarized theme](https://github.com/altercation/solarized/) and, if you're
# using it on Mac OS X, [iTerm 2](http://www.iterm2.com/) over Terminal.app -
# it has significantly better color fidelity.
#
# # Goals
#
# The aim of this theme is to only show you *relevant* information. Like most
# prompts, it will only show git information when in a git working directory.
# However, it goes a step further: everything from the current user and
# hostname to whether the last call exited with an error to whether background
# jobs are running in this shell will all be displayed automatically when
# appropriate.

### Segment drawing
# A few utility functions to make it easy and re-usable to draw segmented prompts

CURRENT_BG='NONE'
PRIMARY_FG=black

# Characters
SEGMENT_SEPARATOR="\ue0b0"
SEGMENT_RSEPARATOR="\ue0b2"
PLUSMINUS="\ue601"
BRANCH="\ue0a0"
DETACHED="\u27a6"
CROSS="\uf00D"
LIGHTNING="\u26a1"
GEAR="\u2699"

VIRTUALENV="\ue606"
GIT="\uf1d3"
DATE="\uf43a"
COMPUTER="\uf109"
TERMINAL="\uf120"
DIRICO="\uf115"
FAIL="\uf479"
USERICON="\uf470"


# Begin a segment
# Takes two arguments, background and foreground. Both can be omitted,
# rendering default background/foreground.
prompt_segment() {
  local bg fg
  [[ -n $1 ]] && bg="%K{$1}" || bg="%k"
  [[ -n $2 ]] && fg="%F{$2}" || fg="%f"
  if [[ $CURRENT_BG != 'NONE' && $1 != $CURRENT_BG ]]; then
    print -n "%{$bg%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR%{$fg%}"
  else
    print -n "%{$bg%}%{$fg%}"
  fi
  CURRENT_BG=$1
  [[ -n $3 ]] && print -n $3
}


prompt_right_segment() {
  local bg fg
  [[ -n $1 ]] && bg="%K{$1}" || bg="%k"
  [[ -n $2 ]] && fg="%F{$2}" || fg="%f"
  print -n "%F{$1}$SEGMENT_RSEPARATOR%{$bg%}%{$fg%}"

  CURRENT_BG=$1
  [[ -n $3 ]] && print -n $3

}


# End the prompt, closing any open segments
prompt_end() {
  if [[ -n $CURRENT_BG ]]; then
    print -n "%{%k%F{$CURRENT_BG}%}$SEGMENT_SEPARATOR"
  else
    print -n "%{%k%}"
  fi
  print -n "%{%f%}"
  CURRENT_BG=''
}

prompt_hostname() {
  local bg=23
  prompt_segment $bg 11 " $COMPUTER  %m "
  CURRENT_BG=$bg
}



### Prompt components
# Each component will draw itself, and hide itself if no information needs to be shown

# Context: user@hostname (who am I and where am I)
prompt_context() {
  local user=`whoami`
  local bg=226
  local fg=16

  if [[ $UID -eq 0 ]]; then
    bg=1
    fg=231
  fi

    # prompt_segment $bg $fg " $user %F{235}%f%K{235}%F{$bg}$COMPUTER%f %F{235}%K{$bg}%f%F{$fg} %m "
    prompt_segment $bg $fg " $user "

    CURRENT_BG=$bg
  # if [[ "$user" != "$DEFAULT_USER" || -n "$SSH_CONNECTION" ]]; then
  #   prompt_segment $PRIMARY_FG default " %(!.%{%F{yellow}%}.)$user "
  # fi
}

# Git: branch/detached head, dirty status
prompt_git() {
  local color ref
  fg=$PRIMARY_FG
  is_dirty() {
    test -n "$(git status --porcelain --ignore-submodules)"
  }
  ref="$vcs_info_msg_0_"
  if [[ -n "$ref" ]]; then
    if is_dirty; then
      color=234
      fg=87
      ref="${ref} $PLUSMINUS "
    else
      color=234
      fg=48
      ref="${ref} "
    fi
    if [[ "${ref/.../}" == "$ref" ]]; then
      ref="$BRANCH $ref"
    else
      ref="$DETACHED ${ref/.../}"
    fi
    prompt_right_segment $color $fg
    print -Pn " $GIT  $ref "
  fi
}

# Dir: current working directory
prompt_dir() {
  local bg=235
  local fdir=${(%):-%3c}
 
  if [ $(echo $fdir | grep -Ec "^/$") -eq 1 ]; then
    fdir=""
    prompt_segment $bg 228 " $DIRICO "
  else
    if [ $(echo $fdir | cut -c1 | grep -Ec "^/") -eq 1 ]; then
      fdir="$(echo ${fdir} | cut -c1 --complement)"
      # echo "here"
    else
      if [ $(echo $fdir | cut -c1 | grep -Ec "^~") -eq 0 ]; then
        fdir="../${fdir}"
      fi
    fi 
    fdir=${fdir//"\/"/" %F{241}%f%F{228} "} 
    prompt_segment $bg 228 " $DIRICO %F{241}%f%F{228} $fdir "
  fi
  # prompt_segment blue $PRIMARY_FG ' %~ '
  CURRENT_BG=$bg
}

# Status:
# - was there an error
# - am I root
# - are there background jobs?
prompt_status() {
  local symbols
  local bg=227
  symbols=()
  # [[ $RETVAL -ne 0 ]] && symbols+="%{%F{red}%}$CROSS"

  if [[ $UID -eq 0 ]]; then
    symbols+="%{%F{yellow}%}$LIGHTNING"
    bg=$PRIMARY_FG
  else
    symbols+="%{%F{16}%}$USERICON"
  fi

  [[ $(jobs -l | wc -l) -gt 0 ]] && symbols+="%{%F{cyan}%}$GEAR"

  [[ -n "$symbols" ]] && prompt_segment $bg default " $symbols "

  CURRENT_BG=$bg
}


prompt_virtualenv () {

if [ -d "$HOME/.pyenv" ]; then
  local bg=237
  local pye=$(pyenv version-name)
  # print -n "${python_info[virtualenv]}"

  if [[ $pye != 'system' ]]; then
    prompt_right_segment 237 81 " $VIRTUALENV $pye "
    CURRENT_BG=$bg
  fi
fi
}

prompt_endcap() {
  # print -n "%{%k%} "
  # CURRENT_BG=''
  if [[ $RETVAL -ne 0 ]]; then
    prompt_segment 1 254 " $FAIL  "
    CURRENT_BG=1
  else
    prompt_segment 190 16 " $TERMINAL  "
    CURRENT_BG=190
  fi
}

prompt_right () {
  # print -n "%b%B{238}"
  # prompt_end
  prompt_right_segment 228 16 " $DATE %D{%m/%d/%y %H:%M:%S} %{$reset_color%}"
  prompt_git
  prompt_virtualenv
  # prompt_end_right

}

## Main prompt
prompt_dtrip2_main() {
  RETVAL=$?
  CURRENT_BG='NONE'
  prompt_status
  prompt_context
  prompt_hostname
  prompt_dir
  prompt_endcap
  # prompt_git
  prompt_end
}

prompt_dtrip2_precmd() {
  vcs_info
  PROMPT='%{%f%b%k%}$(prompt_dtrip2_main) '
  RPROMPT="$(prompt_right)"
}

prompt_dtrip2_setup() {
  autoload -Uz add-zsh-hook
  autoload -Uz vcs_info

  prompt_opts=(cr subst percent)

  add-zsh-hook precmd prompt_dtrip2_precmd

  zstyle ':vcs_info:*' enable git
  zstyle ':vcs_info:*' check-for-changes false
  zstyle ':vcs_info:git*' formats '%b'
  zstyle ':vcs_info:git*' actionformats '%b (%a)'
}

prompt_dtrip2_setup "$@"
